# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T03:38:55+00:00

from __future__ import annotations

from enum import Enum
from typing import Any, Dict, List, Optional, Union

from pydantic import BaseModel, Field, RootModel, conint, constr


class AccountCredentials(BaseModel):
    login: Optional[str] = None
    password: Optional[str] = None


class AddApiKeyPrivilegeRequest(BaseModel):
    privilege: str


class AddPartnerRequest(BaseModel):
    organizationId: str = Field(
        ...,
        description='The namespace of the partner organization to add',
        examples=['org.acme'],
    )


class Code(Enum):
    ERR_REGISTRATION_VERIFICATION_NO_TOKEN = 'ERR_REGISTRATION_VERIFICATION_NO_TOKEN'
    ERR_REGISTRATION_VERIFICATION_INVALID_TOKEN = (
        'ERR_REGISTRATION_VERIFICATION_INVALID_TOKEN'
    )
    ERR_REGISTRATION_VERIFICATION_EXPIRED_TOKEN = (
        'ERR_REGISTRATION_VERIFICATION_EXPIRED_TOKEN'
    )
    ERR_AUTHENTICATION_NO_TOKEN = 'ERR_AUTHENTICATION_NO_TOKEN'
    ERR_AUTHENTICATION_INVALID_TOKEN = 'ERR_AUTHENTICATION_INVALID_TOKEN'
    ERR_AUTHENTICATION_EXPIRED_TOKEN = 'ERR_AUTHENTICATION_EXPIRED_TOKEN'
    ERR_AUTHENTICATION_FAILED = 'ERR_AUTHENTICATION_FAILED'
    ERR_AUTHORIZATION_MISSING_PRIVILEGES = 'ERR_AUTHORIZATION_MISSING_PRIVILEGES'
    ERR_AUTHORIZATION_FORBIDDEN = 'ERR_AUTHORIZATION_FORBIDDEN'
    ERR_AUTHORIZATION_REQUIRE_USER = 'ERR_AUTHORIZATION_REQUIRE_USER'
    ERR_INPUT_VALIDATION_FAILED = 'ERR_INPUT_VALIDATION_FAILED'
    ERR_FIELD_INPUT_VALIDATION_FAILED = 'ERR_FIELD_INPUT_VALIDATION_FAILED'
    ERR_VALIDATION_CONSTRAINT_FAILED = 'ERR_VALIDATION_CONSTRAINT_FAILED'
    ERR_INPUT_NOT_READABLE = 'ERR_INPUT_NOT_READABLE'
    ERR_INVALID_INPUT_PARAMETER = 'ERR_INVALID_INPUT_PARAMETER'
    ERR_GUID_CREATION = 'ERR_GUID_CREATION'
    ERR_INVALID_ID4N_OBJECT_TYPE = 'ERR_INVALID_ID4N_OBJECT_TYPE'
    ERR_MISSING_BILLING_INFORMATION = 'ERR_MISSING_BILLING_INFORMATION'
    ERR_COLLECTION_UPDATE_DENIED = 'ERR_COLLECTION_UPDATE_DENIED'
    ERR_ENTITY_NOT_FOUND = 'ERR_ENTITY_NOT_FOUND'
    ERR_ENTITY_TOO_BIG = 'ERR_ENTITY_TOO_BIG'
    ERR_DUPLICATE = 'ERR_DUPLICATE'
    ERR_INTERNAL = 'ERR_INTERNAL'
    ERR_UNKNOWN = 'ERR_UNKNOWN'
    ERR_INVALID_ORGANIZATION_USERROLE = 'ERR_INVALID_ORGANIZATION_USERROLE'
    ERR_ORGANIZATION_ROLE_INCONSISTENCY = 'ERR_ORGANIZATION_ROLE_INCONSISTENCY'
    ERR_ORGANIZATION_NOT_DELETABLE = 'ERR_ORGANIZATION_NOT_DELETABLE'
    ERR_USER_ALREADY_IN_ORGANIZATION = 'ERR_USER_ALREADY_IN_ORGANIZATION'
    ERR_USER_INVITATION_NEEDS_MINIMUM_ONE_ROLE = (
        'ERR_USER_INVITATION_NEEDS_MINIMUM_ONE_ROLE'
    )
    ERR_USER_INVITATION_SPECIFY_EMAIL_OR_USERNAME = (
        'ERR_USER_INVITATION_SPECIFY_EMAIL_OR_USERNAME'
    )
    ERR_USER_DEACTIVATED = 'ERR_USER_DEACTIVATED'
    ERR_LANGUAGE_NOT_SUPPORTED = 'ERR_LANGUAGE_NOT_SUPPORTED'
    ERR_EMAIL_MISSING_TEMPLATE_PARAM = 'ERR_EMAIL_MISSING_TEMPLATE_PARAM'
    ERR_EMAIL_TEMPLATE_NOT_AVAILABLE = 'ERR_EMAIL_TEMPLATE_NOT_AVAILABLE'
    ERR_EMAIL_PREPARATION_FAILED = 'ERR_EMAIL_PREPARATION_FAILED'
    ERR_IMAGE_CONVERSION = 'ERR_IMAGE_CONVERSION'
    ERR_UPLOAD_TOO_LARGE = 'ERR_UPLOAD_TOO_LARGE'
    ERR_INVALID_ALIAS_TYPE = 'ERR_INVALID_ALIAS_TYPE'
    ERR_INVALID_URI_TEMPLATE = 'ERR_INVALID_URI_TEMPLATE'
    ERR_INVALID_URI_TEMPLATE_VARIABLE = 'ERR_INVALID_URI_TEMPLATE_VARIABLE'
    ERR_INVALID_NAMESPACE = 'ERR_INVALID_NAMESPACE'
    ERR_INVALID_PROPERTY_KEY = 'ERR_INVALID_PROPERTY_KEY'
    ERR_INVALID_FILTER = 'ERR_INVALID_FILTER'
    ERR_NAMESPACE_ALREADY_EXISTS = 'ERR_NAMESPACE_ALREADY_EXISTS'
    ERR_INSECURE_PASSWORD = 'ERR_INSECURE_PASSWORD'
    ERR_TRANSFER_DENIED = 'ERR_TRANSFER_DENIED'
    ERR_INVALID_PHYSICAL_STATE = 'ERR_INVALID_PHYSICAL_STATE'
    ERR_INVALID_HISTORY_PROPERTY_NAMESPACE = 'ERR_INVALID_HISTORY_PROPERTY_NAMESPACE'
    ERR_INVALID_HISTORY_PROPERTY_VALUE = 'ERR_INVALID_HISTORY_PROPERTY_VALUE'
    ERR_ORGA_CANNOT_BE_OWN_PARTNER = 'ERR_ORGA_CANNOT_BE_OWN_PARTNER'
    ERR_INVALID_GS1_CODE = 'ERR_INVALID_GS1_CODE'
    ERR_INVALID_GS1_CHAR_IN_CODE = 'ERR_INVALID_GS1_CHAR_IN_CODE'
    ERR_INVALID_GS1_CODE_NOT_UNIQUE = 'ERR_INVALID_GS1_CODE_NOT_UNIQUE'
    ERR_INVALID_GS1_GTIN = 'ERR_INVALID_GS1_GTIN'
    ERR_GS1_CODE_CURRENTLY_UNSUPPORTED = 'ERR_GS1_CODE_CURRENTLY_UNSUPPORTED'


class ApiError(BaseModel):
    code: Code
    errorId: str
    errorList: List[ApiError]
    message: str


class ApiKeyChangeRequest(BaseModel):
    active: Optional[bool] = None
    newLabel: constr(min_length=5, max_length=50)


class ApiKeyCreationRequest(BaseModel):
    label: constr(min_length=5, max_length=50)
    organizationId: str = Field(..., examples=['de.acme'])
    secret: constr(min_length=10, max_length=500)


class ApiKeyPresentation(BaseModel):
    active: bool = Field(
        ..., description='Whether this API key is active', examples=[True]
    )
    createdAt: int = Field(
        ...,
        description='The UTC unix timestamp of when this api key has been created',
        examples=[1517232722],
    )
    createdBy: str = Field(..., examples=['user123'])
    key: str = Field(
        ...,
        description='The api key identifier',
        examples=['39978f49-6ff1-4147-bf0f-9910185084b7'],
    )
    label: str = Field(
        ..., description='The label / name of the api key', examples=['My Api Key']
    )
    organizationId: str = Field(
        ...,
        description='The organization namespace this api key belongs to',
        examples=['de.acme'],
    )


class ApiKeyPrivilege(BaseModel):
    id4nAssociated: bool
    privilege: str


class ApiKeyPrivilegeInfo(BaseModel):
    allowsBillableOperations: Optional[bool] = None
    helpText: Optional[str] = None
    id4nAssociated: bool
    name: str


class AppInfoPresentation(BaseModel):
    branch: Optional[str] = None
    commitTime: Optional[str] = None
    name: Optional[str] = None
    productionMode: Optional[bool] = None
    revision: Optional[str] = None
    version: Optional[str] = None


class BillingPosition(BaseModel):
    amount: int
    count: float
    description: str
    service: str
    singlePrice: float
    sum: float
    unit: str


class ChangeLogEntry(BaseModel):
    id: Optional[str] = Field(
        None, description='The unique id of the changelog entry', examples=['e100123']
    )
    message: Optional[str] = Field(
        None,
        description='The message as template or rendered as plain text',
        examples=['User {{&user}} has changed the title of {{&object}}'],
    )
    messageProperties: Optional[Dict[str, Dict[str, Any]]] = Field(
        None,
        description='The values of the properties in the message. May be nested as object with a value field ',
        examples=[
            {
                'object': 'nearly every object',
                'user': {'type': 'user', 'value': 'a.vratny'},
            }
        ],
    )
    timestamp: Optional[int] = Field(
        None,
        description='The UTC unix timestamp when this change occurred',
        examples=[1517232722],
    )


class ChangeRoleRequest(BaseModel):
    roles: Optional[List[str]] = None


class CompleteUserRegistrationRequest(BaseModel):
    password: constr(min_length=8, max_length=99)
    username: constr(pattern=r'[a-zA-Z0-9_.-]{6,50}')
    verificationToken: str


class Country(BaseModel):
    code: str
    name: str


class Type(Enum):
    ROUTING_COLLECTION = 'ROUTING_COLLECTION'
    LOGISTIC_COLLECTION = 'LOGISTIC_COLLECTION'
    LABELLED_COLLECTION = 'LABELLED_COLLECTION'


class CreateCollectionRequest(BaseModel):
    label: Optional[constr(min_length=5, max_length=128)] = None
    length: conint(ge=6, le=255)
    organizationId: str = Field(..., examples=['de.acme'])
    type: Type


class CreateGuidRequest(BaseModel):
    count: conint(ge=1, le=1000) = Field(
        ..., description='The total number of GUIDs to create', examples=[1]
    )
    length: conint(ge=7, le=255) = Field(
        ..., description='The charactersequence length of the GUID', examples=[40]
    )
    organizationId: str = Field(
        ...,
        description='The namespace of the organization where the generated GUIDs should be assigned.',
        examples=['de.acme'],
    )


class PhysicalState(Enum):
    UNATTACHED = 'UNATTACHED'
    ATTACHED = 'ATTACHED'
    DETACHED = 'DETACHED'


class Guid(BaseModel):
    createdTimestamp: Optional[int] = Field(
        None,
        description='The UTC unix timestamp of when this GUID has been created',
        examples=[1517232722],
    )
    holderOrganizationId: Optional[str] = Field(
        None, description='Organization namespace of the GUID holder'
    )
    id4n: Optional[str] = Field(None, description='The ID', examples=['3THvgrWxqgTFC4'])
    ownerOrganizationId: Optional[str] = Field(
        None, description='Organization namespace of the GUID owner'
    )
    physicalState: Optional[PhysicalState] = Field(
        None, description='Physical attachment state of the GUID'
    )
    properties: Optional[Dict[str, str]] = Field(
        None, description='The properties of the organization', examples=['de.example']
    )


class GuidAlias(BaseModel):
    alias: constr(min_length=1, max_length=255) = Field(
        ..., description='An alias', examples=['alias']
    )


class GuidCollection(BaseModel):
    createdTimestamp: Optional[int] = Field(
        None,
        description='The UTC unix timestamp of when this collection has been created',
    )
    holderOrganizationId: Optional[str] = Field(
        None, description='Organization namespace of the holder of the collection'
    )
    id4n: Optional[str] = Field(None, description='The ID')
    label: Optional[constr(min_length=5, max_length=128)] = None
    ownerOrganizationId: Optional[str] = Field(
        None, description='Organization namespace of the collection owner'
    )
    physicalState: Optional[PhysicalState] = Field(
        None, description='Physical attachment state of the collection'
    )
    type: Optional[Type] = None


class Type2(Enum):
    CREATED = 'CREATED'
    DESTROYED = 'DESTROYED'
    RECYCLED = 'RECYCLED'
    SHIPMENT_PREPARED = 'SHIPMENT_PREPARED'
    STORED = 'STORED'
    RETRIEVED_FROM_STORAGE = 'RETRIEVED_FROM_STORAGE'
    PACKAGED = 'PACKAGED'
    DISPATCHED = 'DISPATCHED'
    RECEIVED = 'RECEIVED'
    DELIVERY_REFUSED = 'DELIVERY_REFUSED'
    REPROCESSING_STARTED = 'REPROCESSING_STARTED'
    REPROCESSING_STEP_STARTED = 'REPROCESSING_STEP_STARTED'
    REPROCESSING_STEP_CANCELLED = 'REPROCESSING_STEP_CANCELLED'
    REPROCESSING_STEP_FINISHED = 'REPROCESSING_STEP_FINISHED'
    REPROCESSING_CANCELLED = 'REPROCESSING_CANCELLED'
    REPROCESSING_FINISHED = 'REPROCESSING_FINISHED'
    DISASSEMBLED = 'DISASSEMBLED'
    MAINTENANCE_STARTED = 'MAINTENANCE_STARTED'
    MAINTENANCE_STEP_STARTED = 'MAINTENANCE_STEP_STARTED'
    MAINTENANCE_STEP_CANCELLED = 'MAINTENANCE_STEP_CANCELLED'
    MAINTENANCE_STEP_FINISHED = 'MAINTENANCE_STEP_FINISHED'
    MAINTENANCE_CANCELLED = 'MAINTENANCE_CANCELLED'
    MAINTENANCE_FINISHED = 'MAINTENANCE_FINISHED'
    PRODUCTION_STARTED = 'PRODUCTION_STARTED'
    PRODUCTION_CANCELLED = 'PRODUCTION_CANCELLED'
    PRODUCTION_FINISHED = 'PRODUCTION_FINISHED'
    PRODUCTION_STEP_STARTED = 'PRODUCTION_STEP_STARTED'
    PRODUCTION_STEP_CANCELLED = 'PRODUCTION_STEP_CANCELLED'
    PRODUCTION_STEP_FINISHED = 'PRODUCTION_STEP_FINISHED'
    QUALITY_CHECK_PERFORMED = 'QUALITY_CHECK_PERFORMED'


class Id4n(BaseModel):
    id4n: Optional[str] = Field(None, description='The ID', examples=['3THvgrWxqgTFC4'])


class Type3(Enum):
    GUID = 'GUID'
    ROUTING_COLLECTION = 'ROUTING_COLLECTION'
    LOGISTIC_COLLECTION = 'LOGISTIC_COLLECTION'
    LABELLED_COLLECTION = 'LABELLED_COLLECTION'


class Id4nPresentation(BaseModel):
    createdTimestamp: Optional[int] = Field(
        None,
        description='The UTC unix timestamp of when this ID has been created',
        examples=[1517232722],
    )
    holderOrganizationId: Optional[str] = Field(
        None,
        description='Organization namespace of the holder of the ID',
        examples=['de.example'],
    )
    id4n: Optional[str] = Field(None, description='The ID', examples=['3THvgrWxqgTFC4'])
    label: Optional[str] = None
    ownerOrganizationId: Optional[str] = Field(
        None,
        description='Organization namespace of the ID owner',
        examples=['org.acme'],
    )
    properties: Optional[Dict[str, str]] = Field(
        None, description='The properties of the organization', examples=['de.example']
    )
    type: Optional[Type3] = Field(None, description='The type of ID')


class Id4nProperties(BaseModel):
    id4n: Optional[str] = Field(None, description='The ID4n')
    properties: Optional[Dict[str, str]] = Field(
        None, description='The properties of the ID4n'
    )


class ListOfGS1s(BaseModel):
    codes: Optional[List[str]] = Field(None, description='A list of GS1/MAPP codes.')


class ListOfId4nProperties(BaseModel):
    list: Optional[List[Id4nProperties]] = Field(
        None, description='A list containing the id4n with its properties.'
    )


class ListOfId4ns(BaseModel):
    id4ns: Optional[List[str]] = Field(None, description='A list of id4ns.')


class Organization(BaseModel):
    id: Optional[int] = Field(
        None,
        description='The id of the organization ( Deprecated: Use namespace instead. )',
        examples=[100],
    )
    logoURL: Optional[str] = Field(
        None,
        description='URL to a logo of the organization',
        examples=['/api/v1/public/images/abcdef'],
    )
    name: constr(min_length=3, max_length=254) = Field(
        ..., description='The name of the organization', examples=['ACME Inc.']
    )
    namespace: constr(min_length=3, max_length=255) = Field(
        ..., description='The namespace of the organization', examples=['de.acme']
    )


class OrganizationAddress(BaseModel):
    city: constr(min_length=2, max_length=99) = Field(..., examples=['MyCity'])
    companyName: Optional[constr(min_length=0, max_length=254)] = Field(
        None, examples=['ACME Inc.']
    )
    countryCode: constr(min_length=0, max_length=2) = Field(
        ..., description='The ISO 3166 two-letter country code', examples=['DE']
    )
    countryName: Optional[str] = Field(
        None, description='The country name', examples=['Germany']
    )
    firstname: constr(min_length=0, max_length=255) = Field(..., examples=['Max'])
    lastname: constr(min_length=0, max_length=255) = Field(..., examples=['Muster'])
    postCode: constr(min_length=2, max_length=40) = Field(..., examples=[12345])
    street: constr(min_length=3, max_length=254) = Field(
        ..., examples=['Examplestreet 1']
    )
    telephone: Optional[constr(min_length=0, max_length=99)] = Field(
        None, description='The telephone number e.g.', examples=['+49 8088 12345']
    )


class OrganizationUpdate(BaseModel):
    name: Optional[constr(min_length=3, max_length=254)] = Field(
        None, description='The name of the organization', examples=['ACME Inc.']
    )


class OrganizationUserInvitation(BaseModel):
    email: Optional[str] = None
    roles: List[str]
    userName: Optional[str] = None


class OrganizationUserInvitationListRequest(BaseModel):
    invitations: List[OrganizationUserInvitation]


class PaginatedResponseOfApiKeyPresentation(BaseModel):
    elements: List[ApiKeyPresentation]
    limit: int = Field(
        ..., description='The number of returned elements', examples=[100]
    )
    offset: int = Field(..., description='Starting with the n-th element', examples=[0])
    total: Optional[int] = Field(
        None, description='The total number of elements', examples=[200]
    )


class PaginatedResponseOfApiKeyPrivilege(BaseModel):
    elements: List[ApiKeyPrivilege]
    limit: int = Field(
        ..., description='The number of returned elements', examples=[100]
    )
    offset: int = Field(..., description='Starting with the n-th element', examples=[0])
    total: Optional[int] = Field(
        None, description='The total number of elements', examples=[200]
    )


class PaginatedResponseOfApiKeyPrivilegeInfo(BaseModel):
    elements: List[ApiKeyPrivilegeInfo]
    limit: int = Field(
        ..., description='The number of returned elements', examples=[100]
    )
    offset: int = Field(..., description='Starting with the n-th element', examples=[0])
    total: Optional[int] = Field(
        None, description='The total number of elements', examples=[200]
    )


class PaginatedResponseOfChangeLogEntry(BaseModel):
    elements: List[ChangeLogEntry]
    limit: int = Field(
        ..., description='The number of returned elements', examples=[100]
    )
    offset: int = Field(..., description='Starting with the n-th element', examples=[0])
    total: Optional[int] = Field(
        None, description='The total number of elements', examples=[200]
    )


class PaginatedResponseOfCountry(BaseModel):
    elements: List[Country]
    limit: int = Field(
        ..., description='The number of returned elements', examples=[100]
    )
    offset: int = Field(..., description='Starting with the n-th element', examples=[0])
    total: Optional[int] = Field(
        None, description='The total number of elements', examples=[200]
    )


class PaginatedResponseOfGuid(BaseModel):
    elements: List[Guid]
    limit: int = Field(
        ..., description='The number of returned elements', examples=[100]
    )
    offset: int = Field(..., description='Starting with the n-th element', examples=[0])
    total: Optional[int] = Field(
        None, description='The total number of elements', examples=[200]
    )


class PaginatedResponseOfGuidCollection(BaseModel):
    elements: List[GuidCollection]
    limit: int = Field(
        ..., description='The number of returned elements', examples=[100]
    )
    offset: int = Field(..., description='Starting with the n-th element', examples=[0])
    total: Optional[int] = Field(
        None, description='The total number of elements', examples=[200]
    )


class PaginatedResponseOfId4nPresentation(BaseModel):
    elements: List[Id4nPresentation]
    limit: int = Field(
        ..., description='The number of returned elements', examples=[100]
    )
    offset: int = Field(..., description='Starting with the n-th element', examples=[0])
    total: Optional[int] = Field(
        None, description='The total number of elements', examples=[200]
    )


class PaginatedResponseOfOrganization(BaseModel):
    elements: List[Organization]
    limit: int = Field(
        ..., description='The number of returned elements', examples=[100]
    )
    offset: int = Field(..., description='Starting with the n-th element', examples=[0])
    total: Optional[int] = Field(
        None, description='The total number of elements', examples=[200]
    )


class PaginatedResponseOfstring(BaseModel):
    elements: List[str]
    limit: int = Field(
        ..., description='The number of returned elements', examples=[100]
    )
    offset: int = Field(..., description='Starting with the n-th element', examples=[0])
    total: Optional[int] = Field(
        None, description='The total number of elements', examples=[200]
    )


class PartnerOrganization(BaseModel):
    logoURL: Optional[str] = Field(
        None,
        description='URL to a logo of the organization',
        examples=['/api/v1/public/images/abcdef'],
    )
    name: Optional[constr(min_length=3, max_length=254)] = Field(
        None, description='The name of the organization', examples=['ACME Inc.']
    )
    namespace: Optional[constr(min_length=3, max_length=255)] = Field(
        None, description='The namespace of the organization', examples=['de.acme']
    )


class PasswordResetRequest(BaseModel):
    username: str


class PasswordResetVerificationRequest(BaseModel):
    password: str
    token: str


class PublicImagePresentation(BaseModel):
    uri: Optional[str] = Field(
        None,
        description='The uri/url of the image',
        examples=['/api/v1/public/image/bc671c63-4a9b-46e7-8c59-9bbe1917e6cc'],
    )


class QueuePresentation(BaseModel):
    active: bool = Field(..., examples=[True])
    id: str = Field(..., examples=['<default>'])
    waitingMessages: Optional[int] = Field(
        None, description='The count of queued messages', examples=[True]
    )


class QueueUpdateRequest(BaseModel):
    active: Optional[bool] = Field(
        None,
        description='If this value is set to false the queue will be deleted.',
        examples=[True],
    )
    id: Optional[str] = Field(None, examples=['<default>'])
    purgeQueue: Optional[bool] = Field(
        None,
        description='Set this value to true if you want to purge the queue.',
        examples=[False],
    )


class RegistrationVerificationTokenPresentation(BaseModel):
    token: str


class RemoveApiKeyPrivilegeRequest(BaseModel):
    privilege: str


class RemovePartnerRequest(BaseModel):
    organizationId: str = Field(
        ...,
        description='The namespace of the partner organization to remove',
        examples=['org.acme'],
    )


class Role(BaseModel):
    name: Optional[str] = None
    privileges: Optional[List[str]] = None


class Route(BaseModel):
    params: Dict[str, str]
    priority: Optional[int] = None
    public: bool
    type: str
    validUntil: Optional[int] = None


class RoutingOptions(BaseModel):
    deleteOutdatedRoutes: Optional[bool] = None


class SendCustomMessage(BaseModel):
    data: Dict[str, str] = Field(
        ...,
        description='Custom data in a map. You may use JSON content',
        examples=['x = y'],
    )
    name: constr(min_length=1, max_length=255) = Field(
        ...,
        description='The name of the message (organisation specific)',
        examples=['<event name>'],
    )


class ServiceCosts(BaseModel):
    listing: Dict[str, float]


class SimpleMessageResponse(BaseModel):
    message: str


class TransferReceiveInfo(BaseModel):
    organizationId: str = Field(
        ...,
        description='Organization to take the ownership of the ID. If the sender chose to keep the ownership, this organization becomes the holder. Otherwise, it becomes the new owner.',
        examples=['de.id4i'],
    )


class TransferSendInfo(BaseModel):
    holderOrganizationId: Optional[str] = Field(
        None, description='The current holder of the object', examples=['de.id4i']
    )
    keepOwnership: bool = Field(
        ...,
        description='Keep the public ownership while transferring the object',
        examples=[True],
    )
    openForClaims: bool = Field(
        ...,
        description='Allow anyone who knows (or can scan) the ID4N to claim ownership of this object',
        examples=[False],
    )
    ownerOrganizationId: Optional[str] = Field(
        None,
        description='The current publicly visible owner of the object',
        examples=['de.bluerain'],
    )
    recipientOrganizationIds: List[str] = Field(
        ...,
        description='Allow only these organizations to obtain this object',
        examples=[['de.acme', 'com.porsche', 'de.bluerain']],
    )


class UserPresentation(BaseModel):
    id: Optional[str] = None
    name: Optional[str] = None


class UserRegistrationRequest(BaseModel):
    email: str
    password: constr(min_length=8, max_length=99)
    username: constr(pattern=r'[a-zA-Z0-9_.-]{6,50}')


class UserRegistrationResponse(BaseModel):
    email: Optional[str] = None
    id: int
    message: Optional[str] = None
    username: Optional[str] = None


class UserRoles(BaseModel):
    roles: Optional[List[str]] = None
    user: Optional[UserPresentation] = None


class Visibility(BaseModel):
    public: Optional[bool] = Field(
        None,
        description='Document is publicly readable (if ID4N is owned by the same organization)',
        examples=[True],
    )
    sharedOrganizationIds: Optional[List[str]] = Field(
        None,
        description='Document is readable by these organizations (independend of ID4N ownership)',
        examples=[['de.acme', 'com.porsche', 'de.bluerain']],
    )


class VisibilityUpdate(BaseModel):
    public: Optional[bool] = Field(
        None,
        description='Document is publicly readable (if ID4N is owned by the same organization)',
        examples=[True],
    )
    sharedWithOrganizationIds: Optional[List[str]] = Field(
        None,
        description='Document is readable by these organizations (independend of ID4N ownership)',
        examples=[['de.acme', 'com.porsche', 'de.bluerain']],
    )


class WhoIsResponse(BaseModel):
    aliases: Optional[Dict[str, str]] = None
    organization: Optional[Organization] = None
    organizationAddress: Optional[OrganizationAddress] = None


class ApiV1BillingOrganizationIdPositionsGetResponse(RootModel[List[BillingPosition]]):
    root: List[BillingPosition]


class ApiV1CollectionsId4nPatchResponse(BaseModel):
    pass


class ApiV1DocumentsId4nOrganizationIdPostRequest(BaseModel):
    content: bytes = Field(..., description='content')


class ApiV1DocumentsId4nOrganizationIdPutRequest(BaseModel):
    content: bytes = Field(..., description='content')


class ApiV1GuidsId4nPatchResponse(BaseModel):
    pass


class TypeEnum(Enum):
    CREATED = 'CREATED'
    DESTROYED = 'DESTROYED'
    RECYCLED = 'RECYCLED'
    SHIPMENT_PREPARED = 'SHIPMENT_PREPARED'
    STORED = 'STORED'
    RETRIEVED_FROM_STORAGE = 'RETRIEVED_FROM_STORAGE'
    PACKAGED = 'PACKAGED'
    DISPATCHED = 'DISPATCHED'
    RECEIVED = 'RECEIVED'
    DELIVERY_REFUSED = 'DELIVERY_REFUSED'
    REPROCESSING_STARTED = 'REPROCESSING_STARTED'
    REPROCESSING_STEP_STARTED = 'REPROCESSING_STEP_STARTED'
    REPROCESSING_STEP_CANCELLED = 'REPROCESSING_STEP_CANCELLED'
    REPROCESSING_STEP_FINISHED = 'REPROCESSING_STEP_FINISHED'
    REPROCESSING_CANCELLED = 'REPROCESSING_CANCELLED'
    REPROCESSING_FINISHED = 'REPROCESSING_FINISHED'
    DISASSEMBLED = 'DISASSEMBLED'
    MAINTENANCE_STARTED = 'MAINTENANCE_STARTED'
    MAINTENANCE_STEP_STARTED = 'MAINTENANCE_STEP_STARTED'
    MAINTENANCE_STEP_CANCELLED = 'MAINTENANCE_STEP_CANCELLED'
    MAINTENANCE_STEP_FINISHED = 'MAINTENANCE_STEP_FINISHED'
    MAINTENANCE_CANCELLED = 'MAINTENANCE_CANCELLED'
    MAINTENANCE_FINISHED = 'MAINTENANCE_FINISHED'
    PRODUCTION_STARTED = 'PRODUCTION_STARTED'
    PRODUCTION_CANCELLED = 'PRODUCTION_CANCELLED'
    PRODUCTION_FINISHED = 'PRODUCTION_FINISHED'
    PRODUCTION_STEP_STARTED = 'PRODUCTION_STEP_STARTED'
    PRODUCTION_STEP_CANCELLED = 'PRODUCTION_STEP_CANCELLED'
    PRODUCTION_STEP_FINISHED = 'PRODUCTION_STEP_FINISHED'
    QUALITY_CHECK_PERFORMED = 'QUALITY_CHECK_PERFORMED'


class Type4(Enum):
    CREATED = 'CREATED'
    DESTROYED = 'DESTROYED'
    RECYCLED = 'RECYCLED'
    SHIPMENT_PREPARED = 'SHIPMENT_PREPARED'
    STORED = 'STORED'
    RETRIEVED_FROM_STORAGE = 'RETRIEVED_FROM_STORAGE'
    PACKAGED = 'PACKAGED'
    DISPATCHED = 'DISPATCHED'
    RECEIVED = 'RECEIVED'
    DELIVERY_REFUSED = 'DELIVERY_REFUSED'
    REPROCESSING_STARTED = 'REPROCESSING_STARTED'
    REPROCESSING_STEP_STARTED = 'REPROCESSING_STEP_STARTED'
    REPROCESSING_STEP_CANCELLED = 'REPROCESSING_STEP_CANCELLED'
    REPROCESSING_STEP_FINISHED = 'REPROCESSING_STEP_FINISHED'
    REPROCESSING_CANCELLED = 'REPROCESSING_CANCELLED'
    REPROCESSING_FINISHED = 'REPROCESSING_FINISHED'
    DISASSEMBLED = 'DISASSEMBLED'
    MAINTENANCE_STARTED = 'MAINTENANCE_STARTED'
    MAINTENANCE_STEP_STARTED = 'MAINTENANCE_STEP_STARTED'
    MAINTENANCE_STEP_CANCELLED = 'MAINTENANCE_STEP_CANCELLED'
    MAINTENANCE_STEP_FINISHED = 'MAINTENANCE_STEP_FINISHED'
    MAINTENANCE_CANCELLED = 'MAINTENANCE_CANCELLED'
    MAINTENANCE_FINISHED = 'MAINTENANCE_FINISHED'
    PRODUCTION_STARTED = 'PRODUCTION_STARTED'
    PRODUCTION_CANCELLED = 'PRODUCTION_CANCELLED'
    PRODUCTION_FINISHED = 'PRODUCTION_FINISHED'
    PRODUCTION_STEP_STARTED = 'PRODUCTION_STEP_STARTED'
    PRODUCTION_STEP_CANCELLED = 'PRODUCTION_STEP_CANCELLED'
    PRODUCTION_STEP_FINISHED = 'PRODUCTION_STEP_FINISHED'
    QUALITY_CHECK_PERFORMED = 'QUALITY_CHECK_PERFORMED'


class Type5(RootModel[Union[List[TypeEnum], Type4]]):
    root: Union[List[TypeEnum], Type4]


class Qualifier(RootModel[List[str]]):
    root: List[str]


class ApiV1Id4nsId4nAliasGetResponse(RootModel[Optional[Dict[str, str]]]):
    root: Optional[Dict[str, str]] = None


class AliasType(Enum):
    gtin = 'gtin'
    article = 'article'
    mapp = 'mapp'
    item = 'item'
    rfid = 'rfid'
    tracking = 'tracking'
    eclass = 'eclass'
    unspsc = 'unspsc'
    product = 'product'
    material = 'material'
    reference = 'reference'


class ApiV1Id4nsId4nPropertiesDeleteRequest(RootModel[List[str]]):
    root: List[str]


class ApiV1Id4nsId4nPropertiesGetResponse(RootModel[Optional[Dict[str, str]]]):
    root: Optional[Dict[str, str]] = None


class ApiV1Id4nsId4nPropertiesPatchRequest(RootModel[Optional[Dict[str, str]]]):
    root: Optional[Dict[str, str]] = None


class ApiV1MicrostorageId4nOrganizationPutResponse(BaseModel):
    pass


class Id4ns(RootModel[List[str]]):
    root: List[str]


class Type7(Enum):
    ROUTING_COLLECTION = 'ROUTING_COLLECTION'
    LOGISTIC_COLLECTION = 'LOGISTIC_COLLECTION'
    LABELLED_COLLECTION = 'LABELLED_COLLECTION'


class Property(RootModel[List[str]]):
    root: List[str]


class ApiV1OrganizationsOrganizationIdLogoPostRequest(BaseModel):
    file: bytes = Field(..., description='An image containing the new logo.')


class ApiV1OrganizationsOrganizationIdPrivilegesGetResponse(RootModel[List[str]]):
    root: List[str]


class ApiV1PublicRoutesId4nGetResponse(RootModel[List[Route]]):
    root: List[Route]


class ApiV1RoutingfilesId4nRoutesTypeGetResponse(RootModel[List[Route]]):
    root: List[Route]


class ApiV1SearchGuidsAliasesTypesGetResponseEnum(Enum):
    gtin = 'gtin'
    article = 'article'
    mapp = 'mapp'
    item = 'item'
    rfid = 'rfid'
    tracking = 'tracking'
    eclass = 'eclass'
    unspsc = 'unspsc'
    product = 'product'
    material = 'material'
    reference = 'reference'


class ApiV1SearchGuidsAliasesTypesGetResponse(
    RootModel[List[ApiV1SearchGuidsAliasesTypesGetResponseEnum]]
):
    root: List[ApiV1SearchGuidsAliasesTypesGetResponseEnum]


class ApiV1SearchGuidsAliasesTypesGetResponse1(
    RootModel[List[ApiV1SearchGuidsAliasesTypesGetResponseEnum]]
):
    root: List[ApiV1SearchGuidsAliasesTypesGetResponseEnum]


class ApiV1TransfersId4nSendInfoPutResponse(BaseModel):
    pass


class Document(BaseModel):
    filename: Optional[str] = Field(
        None, description='File Name', examples=['publicInfo.pdf']
    )
    mimeType: Optional[str] = Field(
        None, description='Mime Type', examples=['text/plain']
    )
    ownerOrganizationId: Optional[str] = Field(
        None,
        description="The organization's namespace which owns the document",
        examples=['de.bluerain'],
    )
    visibility: Optional[Visibility] = None


class DocumentUpdate(BaseModel):
    filename: Optional[str] = Field(
        None, description='File Name', examples=['publicInfo.pdf']
    )
    mimeType: Optional[str] = Field(
        None, description='Mime Type', examples=['text/plain']
    )
    visibility: Optional[VisibilityUpdate] = None


class HistoryItem(BaseModel):
    additionalProperties: Optional[Dict[str, str]] = Field(
        None, description='History items custom additional properties'
    )
    organizationId: str = Field(
        ..., description='Originator of the history item', examples=['org.acme']
    )
    ownerOrganizationId: Optional[str] = Field(
        None, description='Owner of the history item', examples=['de.bluerain']
    )
    sequenceId: Optional[int] = Field(
        None,
        description='Forms the primary key of the history item together with the GUID and the organizationId',
        examples=[9784],
    )
    timestamp: Optional[int] = Field(
        None, description='History item timestamp', examples=[1517232722]
    )
    type: Type2 = Field(
        ..., description='Type of the history item', examples=['DISPATCHED']
    )
    visibility: Optional[Visibility] = None


class HistoryItemUpdate(BaseModel):
    organizationId: Optional[str] = Field(
        None,
        description='New organization id displayed for this item. If given, must match the holder of GUID and the organization the history item is found under.',
        examples=['de.acme'],
    )
    visibility: Optional[Visibility] = None


class ImportGS1CodesRequest(BaseModel):
    listOfGS1s: ListOfGS1s
    organizationId: str = Field(
        ...,
        description='The organization where the GS1/Mapp code is imported.',
        examples=['de.acme'],
    )


class PaginatedResponseOfDocument(BaseModel):
    elements: List[Document]
    limit: int = Field(
        ..., description='The number of returned elements', examples=[100]
    )
    offset: int = Field(..., description='Starting with the n-th element', examples=[0])
    total: Optional[int] = Field(
        None, description='The total number of elements', examples=[200]
    )


class PaginatedResponseOfHistoryItem(BaseModel):
    elements: List[HistoryItem]
    limit: int = Field(
        ..., description='The number of returned elements', examples=[100]
    )
    offset: int = Field(..., description='Starting with the n-th element', examples=[0])
    total: Optional[int] = Field(
        None, description='The total number of elements', examples=[200]
    )


class PaginatedResponseOfPartnerOrganization(BaseModel):
    elements: List[PartnerOrganization]
    limit: int = Field(
        ..., description='The number of returned elements', examples=[100]
    )
    offset: int = Field(..., description='Starting with the n-th element', examples=[0])
    total: Optional[int] = Field(
        None, description='The total number of elements', examples=[200]
    )


class PaginatedResponseOfRole(BaseModel):
    elements: List[Role]
    limit: int = Field(
        ..., description='The number of returned elements', examples=[100]
    )
    offset: int = Field(..., description='Starting with the n-th element', examples=[0])
    total: Optional[int] = Field(
        None, description='The total number of elements', examples=[200]
    )


class PaginatedResponseOfUserPresentation(BaseModel):
    elements: List[UserPresentation]
    limit: int = Field(
        ..., description='The number of returned elements', examples=[100]
    )
    offset: int = Field(..., description='Starting with the n-th element', examples=[0])
    total: Optional[int] = Field(
        None, description='The total number of elements', examples=[200]
    )


class PaginatedResponseOfUserRoles(BaseModel):
    elements: List[UserRoles]
    limit: int = Field(
        ..., description='The number of returned elements', examples=[100]
    )
    offset: int = Field(..., description='Starting with the n-th element', examples=[0])
    total: Optional[int] = Field(
        None, description='The total number of elements', examples=[200]
    )


class RoutingFile(BaseModel):
    options: Optional[RoutingOptions] = None
    routes: List[Route]


class RoutingFileRequest(BaseModel):
    organizationId: Optional[str] = None
    routing: RoutingFile


ApiError.model_rebuild()
