# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T03:38:55+00:00



import argparse
import json
import os
from datetime import datetime
from typing import *
from typing import Optional, Union

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import APIKeyHeader, BaseSecurity
from fastapi import Header, Path, Query, UploadFile

from models import (
    AccountCredentials,
    AddApiKeyPrivilegeRequest,
    AddPartnerRequest,
    AliasType,
    ApiError,
    ApiKeyChangeRequest,
    ApiKeyCreationRequest,
    ApiKeyPresentation,
    ApiV1BillingOrganizationIdPositionsGetResponse,
    ApiV1CollectionsId4nPatchResponse,
    ApiV1GuidsId4nPatchResponse,
    ApiV1Id4nsId4nAliasGetResponse,
    ApiV1Id4nsId4nPropertiesDeleteRequest,
    ApiV1Id4nsId4nPropertiesGetResponse,
    ApiV1Id4nsId4nPropertiesPatchRequest,
    ApiV1MicrostorageId4nOrganizationPutResponse,
    ApiV1OrganizationsOrganizationIdPrivilegesGetResponse,
    ApiV1PublicRoutesId4nGetResponse,
    ApiV1RoutingfilesId4nRoutesTypeGetResponse,
    ApiV1SearchGuidsAliasesTypesGetResponse,
    ApiV1TransfersId4nSendInfoPutResponse,
    AppInfoPresentation,
    ChangeRoleRequest,
    CompleteUserRegistrationRequest,
    CreateCollectionRequest,
    CreateGuidRequest,
    Document,
    DocumentUpdate,
    Guid,
    GuidAlias,
    GuidCollection,
    HistoryItem,
    HistoryItemUpdate,
    Id4n,
    Id4nPresentation,
    Id4ns,
    ImportGS1CodesRequest,
    ListOfId4nProperties,
    ListOfId4ns,
    Organization,
    OrganizationAddress,
    OrganizationUpdate,
    OrganizationUserInvitationListRequest,
    PaginatedResponseOfApiKeyPresentation,
    PaginatedResponseOfApiKeyPrivilege,
    PaginatedResponseOfApiKeyPrivilegeInfo,
    PaginatedResponseOfChangeLogEntry,
    PaginatedResponseOfCountry,
    PaginatedResponseOfDocument,
    PaginatedResponseOfGuid,
    PaginatedResponseOfGuidCollection,
    PaginatedResponseOfHistoryItem,
    PaginatedResponseOfId4nPresentation,
    PaginatedResponseOfOrganization,
    PaginatedResponseOfPartnerOrganization,
    PaginatedResponseOfRole,
    PaginatedResponseOfstring,
    PaginatedResponseOfUserPresentation,
    PaginatedResponseOfUserRoles,
    PasswordResetRequest,
    PasswordResetVerificationRequest,
    Property,
    PublicImagePresentation,
    Qualifier,
    QueuePresentation,
    QueueUpdateRequest,
    RegistrationVerificationTokenPresentation,
    RemoveApiKeyPrivilegeRequest,
    RemovePartnerRequest,
    Route,
    RoutingFile,
    RoutingFileRequest,
    SendCustomMessage,
    ServiceCosts,
    SimpleMessageResponse,
    TransferReceiveInfo,
    TransferSendInfo,
    Type5,
    Type7,
    UserPresentation,
    UserRegistrationRequest,
    UserRegistrationResponse,
    Visibility,
    WhoIsResponse,
)

app = MCPProxy(
    contact={
        'email': 'info@bluerain.de',
        'name': 'BlueRain Software GmbH & Co. KG',
        'url': 'http://bluerain.de',
    },
    description='ID4i HTTP API',
    license={'name': 'MIT', 'url': 'https://opensource.org/licenses/MIT'},
    termsOfService='http://id4i.de',
    title='ID4i API',
    version='1.0.2',
    servers=[{'url': '//backend.id4i.de'}],
)


@app.post(
    '/account/password',
    description=""" Requesting a reset for a new password.  """,
    tags=['user_management'],
)
def request_password_reset(body: PasswordResetRequest):
    """
    Request password reset
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/account/password',
    description=""" Setting a new password and verifying the request to set the password. """,
    tags=['user_management', 'account_authentication'],
)
def verify_password_reset(body: PasswordResetVerificationRequest):
    """
    Verify password reset
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/account/registration',
    description=""" Registering a new user. """,
    tags=['user_management'],
)
def register_user(body: UserRegistrationRequest):
    """
    Register user
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/account/registration',
    description=""" Completing a registration e.g. for invited users. Finish registration with a username and a password. """,
    tags=['user_management'],
)
def complete_registration(body: CompleteUserRegistrationRequest):
    """
    Complete registration
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/account/verification',
    description=""" Verifies a new user registration. """,
    tags=['user_management', 'account_authentication'],
)
def verify_user_registration(body: RegistrationVerificationTokenPresentation):
    """
    Verify registration
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/v1/apikeys',
    description=""" Finding all API key assigned to the specified organization in a paginated manner. """,
    tags=['api_key_management', 'organization_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def list_all_api_keys_of_organization(
    organization_id: Optional[str] = Query(None, alias='organizationId'),
    offset: Optional[int] = None,
    limit: Optional[int] = None,
):
    """
    Find API key by organization
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/v1/apikeys',
    description=""" Creation of a new API key. """,
    tags=['api_key_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def create_new_api_key(body: ApiKeyCreationRequest):
    """
    Create API key
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/v1/apikeys/privileges',
    description=""" Listing all possible API key privileges. """,
    tags=['organization_privileges_management', 'role_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def list_all_api_key_privileges(
    id4n_concerning: Optional[bool] = Query(None, alias='id4nConcerning'),
    offset: Optional[int] = None,
    limit: Optional[int] = None,
):
    """
    List all privileges
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/api/v1/apikeys/{key}',
    description=""" Deletion of an API key. """,
    tags=['api_key_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def delete_api_key(key: str):
    """
    Delete API key
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/v1/apikeys/{key}',
    description=""" Showing the details of an API key. """,
    tags=['api_key_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_api_key(key: str):
    """
    Show API key
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/api/v1/apikeys/{key}',
    description=""" API keys can be updated with new labels, and be activated and deactivated. The secret or UUID cannot be changed. """,
    tags=['api_key_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def update_api_key(key: str, body: ApiKeyChangeRequest = ...):
    """
    Update API keys
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/api/v1/apikeys/{key}/privileges',
    tags=[
        'api_key_management',
        'organization_privileges_management',
        'role_management',
    ],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def remove_api_key_privilege(key: str, body: RemoveApiKeyPrivilegeRequest = ...):
    """
    Remove privilege
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/v1/apikeys/{key}/privileges',
    tags=['organization_privileges_management', 'role_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def list_api_key_privileges(
    key: str, offset: Optional[int] = None, limit: Optional[int] = None
):
    """
    List privileges
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/v1/apikeys/{key}/privileges',
    tags=[
        'api_key_management',
        'organization_privileges_management',
        'role_management',
    ],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def add_api_key_privilege(key: str, body: AddApiKeyPrivilegeRequest = ...):
    """
    Add privilege
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/api/v1/apikeys/{key}/privileges/{privilege}/id4ns',
    tags=[
        'api_key_management',
        'organization_privileges_management',
        'role_management',
    ],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def remove_api_key_privilege_for_id4ns(
    key: str, privilege: str = ..., body: ListOfId4ns = ...
):
    """
    Remove id4ns of a privilege
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/v1/apikeys/{key}/privileges/{privilege}/id4ns',
    description=""" Listing ID4ns of a id4n concerning privilege """,
    tags=['organization_privileges_management', 'role_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def list_id4ns(
    key: str,
    privilege: str = ...,
    offset: Optional[int] = None,
    limit: Optional[int] = None,
):
    """
    ID4ns of a privilege
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/v1/apikeys/{key}/privileges/{privilege}/id4ns',
    tags=['organization_privileges_management', 'role_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def add_api_key_privilege_for_id4ns(
    key: str, privilege: str = ..., body: ListOfId4ns = ...
):
    """
    Add ID4ns of a privilege
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/v1/billing/{organizationId}',
    tags=['billing_operations', 'organization_billing_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_sum_for_organization(
    organization_id: str = Path(..., alias='organizationId'),
    from_date: Optional[datetime] = Query(None, alias='fromDate'),
    to_date: Optional[datetime] = Query(None, alias='toDate'),
):
    """
    Get billing amount of services for a given organization
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/v1/billing/{organizationId}/positions',
    tags=['billing_operations', 'organization_billing_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_positions_for_organization(
    organization_id: str = Path(..., alias='organizationId'),
    from_date: Optional[datetime] = Query(None, alias='fromDate'),
    to_date: Optional[datetime] = Query(None, alias='toDate'),
):
    """
    Get billing positions for a given organization
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/v1/changelog/organization/{organizationId}/',
    description=""" Listing change log entries of the specified organization id. """,
    tags=['history_management', 'organization_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def list_organization_change_log(
    organization_id: str = Path(..., alias='organizationId'),
    message_mime_type: Optional[str] = Query('text/mustache', alias='messageMimeType'),
    from_date: Optional[datetime] = Query(None, alias='fromDate'),
    to_date: Optional[datetime] = Query(None, alias='toDate'),
    offset: Optional[int] = None,
    limit: Optional[int] = None,
):
    """
    List change log entries of an organization
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/v1/collections',
    tags=['collection_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def create_collection(body: CreateCollectionRequest):
    """
    Create collection
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/api/v1/collections/{id4n}',
    tags=['collection_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def delete_collection(id4n: str):
    """
    Delete collection
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/v1/collections/{id4n}',
    tags=['collection_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def find_collection(id4n: str):
    """
    Find collection
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/api/v1/collections/{id4n}',
    description=""" Update collection changing only the given values """,
    tags=['collection_management', 'guid_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def update_collection(id4n: str, body: GuidCollection = ...):
    """
    Update collection
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/api/v1/collections/{id4n}/elements',
    tags=['collection_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def remove_elements_from_collection(id4n: str, body: ListOfId4ns = ...):
    """
    Remove elements from collection
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/v1/collections/{id4n}/elements',
    tags=['collection_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def list_elements_of_collection(
    id4n: str,
    offset: Optional[int] = None,
    limit: Optional[int] = None,
    organization_id: Optional[str] = Query(None, alias='organizationId'),
):
    """
    List contents of the collection
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/v1/collections/{id4n}/elements',
    tags=['collection_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def add_elements_to_collection(id4n: str, body: ListOfId4ns = ...):
    """
    Add elements to collection
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/v1/countries',
    tags=['country_information'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def list_countries(offset: Optional[int] = None, limit: Optional[int] = None):
    """
    List countries
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/v1/documents/{id4n}',
    description=""" Listing all documents of an id4n """,
    tags=[
        'document_management',
        'collection_management',
        'organization_document_management',
    ],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def list_all_documents(
    id4n: str,
    owner: Optional[str] = None,
    offset: Optional[int] = None,
    limit: Optional[int] = None,
):
    """
    List documents
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/v1/documents/{id4n}/{organizationId}',
    description=""" Listing documents of an id4n seen by a specified organization """,
    tags=['organization_document_management', 'document_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def list_documents(
    organization_id: str = Path(..., alias='organizationId'),
    id4n: str = ...,
    owner: Optional[str] = None,
    offset: Optional[int] = None,
    limit: Optional[int] = None,
):
    """
    List organization specific documents
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/v1/documents/{id4n}/{organizationId}',
    description=""" The documents' mime type is suggested on octet-stream data. Otherwise the specified content mime type is used. """,
    tags=[
        'collection_management',
        'document_management',
        'organization_document_management',
    ],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def create_document(
    organization_id: str = Path(..., alias='organizationId'),
    id4n: str = ...,
    file: UploadFile = ...,
):
    """
    Create an document for an id4n
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/api/v1/documents/{id4n}/{organizationId}',
    description=""" Creating or overwriting an existing document  """,
    tags=[
        'document_management',
        'collection_management',
        'organization_document_management',
    ],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def put_document(
    organization_id: str = Path(..., alias='organizationId'),
    id4n: str = ...,
    file: UploadFile = ...,
):
    """
    Put an document for an id4n
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/api/v1/documents/{id4n}/{organizationId}/{fileName}',
    tags=['document_management', 'organization_document_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def delete_document(
    organization_id: str = Path(..., alias='organizationId'),
    id4n: str = ...,
    file_name: str = Path(..., alias='fileName'),
):
    """
    Delete a document
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/v1/documents/{id4n}/{organizationId}/{fileName}',
    tags=['document_management', 'organization_document_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def read_document(
    organization_id: str = Path(..., alias='organizationId'),
    id4n: str = ...,
    file_name: str = Path(..., alias='fileName'),
):
    """
    Read document contents
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/v1/documents/{id4n}/{organizationId}/{fileName}/metadata',
    tags=['document_management', 'organization_document_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_document(
    organization_id: str = Path(..., alias='organizationId'),
    id4n: str = ...,
    file_name: str = Path(..., alias='fileName'),
):
    """
    Retrieve a document (meta-data only, no content)
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/api/v1/documents/{id4n}/{organizationId}/{fileName}/metadata',
    tags=['document_management', 'organization_document_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def update_document_metadata(
    organization_id: str = Path(..., alias='organizationId'),
    id4n: str = ...,
    file_name: str = Path(..., alias='fileName'),
    body: DocumentUpdate = ...,
):
    """
    Update a document
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/v1/guids',
    description=""" Creating one or more GUIDs with a specified length. """,
    tags=['guid_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def create_guid(body: CreateGuidRequest):
    """
    Create GUID(s)
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/v1/guids/withoutCollection',
    tags=['guid_management', 'collection_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_guids_without_collection(
    organization_id: str = Query(..., alias='organizationId'),
    offset: Optional[int] = None,
    limit: Optional[int] = None,
):
    """
    Retrieve GUIDs not in any collection
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/v1/guids/{id4n}',
    tags=['guid_management', 'collection_management', 'alias_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_guid(
    id4n: str, organization_id: Optional[str] = Query(None, alias='organizationId')
):
    """
    Retrieve GUID information
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/api/v1/guids/{id4n}',
    description=""" Allows ownership transfer. """,
    tags=['guid_management', 'collection_management', 'document_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def update_guid(id4n: str, body: Guid = ...):
    """
    Change GUID information.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/v1/history/{id4n}',
    description=""" Lists the history of a GUID """,
    tags=['history_management', 'collection_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def filtered_list(
    id4n: str,
    include_private: Optional[bool] = Query(True, alias='includePrivate'),
    organization: Optional[str] = None,
    type: Optional[Type5] = None,
    qualifier: Optional[Qualifier] = None,
    from_date: Optional[datetime] = Query(None, alias='fromDate'),
    to_date: Optional[datetime] = Query(None, alias='toDate'),
    offset: Optional[int] = None,
    limit: Optional[int] = None,
):
    """
    List history
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/v1/history/{id4n}',
    description=""" Add a new history item """,
    tags=['history_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def add_item(id4n: str, body: HistoryItem = ...):
    """
    Add history item
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/v1/history/{id4n}/{organizationId}',
    description=""" DEPRECATED - please use filteredList with organization parameter to achieve the same functionality """,
    tags=['history_management', 'collection_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def list(
    id4n: str,
    organization_id: str = Path(..., alias='organizationId'),
    include_private: Optional[bool] = Query(True, alias='includePrivate'),
    offset: Optional[int] = None,
    limit: Optional[int] = None,
):
    """
    DEPRECATED - List history
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/v1/history/{id4n}/{organizationId}/{sequenceId}',
    tags=['history_management', 'collection_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def retrieve_item(
    id4n: str,
    organization_id: str = Path(..., alias='organizationId'),
    sequence_id: int = Path(..., alias='sequenceId'),
):
    """
    Get history item
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/api/v1/history/{id4n}/{organizationId}/{sequenceId}',
    tags=['history_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def update_item(
    id4n: str,
    organization_id: str = Path(..., alias='organizationId'),
    sequence_id: int = Path(..., alias='sequenceId'),
    body: HistoryItemUpdate = ...,
):
    """
    Update history item
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/api/v1/history/{id4n}/{organizationId}/{sequenceId}/visibility',
    tags=['history_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def update_item_visibility(
    id4n: str,
    organization_id: str = Path(..., alias='organizationId'),
    sequence_id: int = Path(..., alias='sequenceId'),
    body: Visibility = ...,
):
    """
    Set history item visibility
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/v1/id4ns/{id4n}',
    description=""" Retrieving basic information about an ID like the type and the creation time. """,
    tags=['collection_management', 'document_management', 'property_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_id4n(
    id4n: str, organization_id: Optional[str] = Query(None, alias='organizationId')
):
    """
    Retrieve ID4n information
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/v1/id4ns/{id4n}/alias',
    description=""" Looks up the alias for each alias type (group and single) and returns a map of all aliases found. """,
    tags=['guid_management', 'alias_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_guid_aliases(id4n: str):
    """
    Get all aliases for the given GUID or Collection.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/api/v1/id4ns/{id4n}/alias/{aliasType}',
    description=""" Remove the alias of the given type """,
    tags=['guid_management', 'alias_management', 'collection_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def remove_guid_alias(id4n: str, alias_type: AliasType = Path(..., alias='aliasType')):
    """
    Remove aliases from GUID or Collection
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/v1/id4ns/{id4n}/alias/{aliasType}',
    description=""" Adds or replaces aliases for single ID4ns (alias type item and mapp) or groups of ID4ns (alias types gtin, ean and article) """,
    tags=['guid_management', 'alias_management', 'collection_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def add_guid_alias(
    id4n: str,
    alias_type: AliasType = Path(..., alias='aliasType'),
    body: GuidAlias = ...,
):
    """
    Add alias for GUID or Collection
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/v1/id4ns/{id4n}/collections',
    description=""" Retrieving all owned or holding collections the specified id4n is assigned to. """,
    tags=['collection_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_collections(
    id4n: str,
    organization_id: Optional[str] = Query(None, alias='organizationId'),
    offset: Optional[int] = None,
    limit: Optional[int] = None,
):
    """
    Retrieve collections of an ID
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/api/v1/id4ns/{id4n}/properties',
    description=""" Partial deletion of id4n properties. If the property does not exist, it will be ignored. """,
    tags=['property_management', 'collection_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def delete_properties(
    id4n: str,
    organization_id: str = Query(..., alias='organizationId'),
    body: ApiV1Id4nsId4nPropertiesDeleteRequest = ...,
):
    """
    Delete ID4n properties
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/v1/id4ns/{id4n}/properties',
    description=""" List all properties of an id4n. """,
    tags=['collection_management', 'property_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_properties(
    id4n: str, organization_id: Optional[str] = Query(None, alias='organizationId')
):
    """
    Retrieve ID4n properties
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/api/v1/id4ns/{id4n}/properties',
    description=""" Partial updating of id4n properties. If a property contains a null value the property will be deleted other values will be saved and overwritten if they already exist. """,
    tags=['property_management', 'collection_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def patch_properties(
    id4n: str,
    organization_id: str = Query(..., alias='organizationId'),
    body: ApiV1Id4nsId4nPropertiesPatchRequest = ...,
):
    """
    Patch ID4n properties
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/v1/import/gs1',
    description=""" Importing GS1/MAPP codes that contain unique components. """,
    tags=['collection_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def import_g_s1_codes(body: ImportGS1CodesRequest):
    """
    Import GS1/MAPP codes
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/v1/info',
    description=""" Retrieving version information about ID4i. """,
    tags=['application_info_retrieval'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def application_info():
    """
    Retrieve version information about ID4i
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/v1/microstorage/{id4n}/{organization}',
    tags=['microstorage_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def read_from_microstorage(organization: str, id4n: str = ...):
    """
    Read data from microstorage
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/api/v1/microstorage/{id4n}/{organization}',
    tags=['microstorage_management', 'collection_management', 'document_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def write_to_microstorage(
    organization: str,
    id4n: str = ...,
    content__type: Optional[str] = Header(None, alias='Content-Type'),
    content__length: Optional[int] = Header(None, alias='Content-Length'),
):
    """
    Write data to microstorage
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/v1/multiple/id4ns/properties',
    description=""" Get a list of ID4n properties for the specified ID4ns. """,
    tags=['property_management', 'collection_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_multiple_properties(
    id4ns: Id4ns, organization_id: Optional[str] = Query(None, alias='organizationId')
):
    """
    Get multiple ID4n properties
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/v1/organizations',
    description=""" Creating a new organization. """,
    tags=['organization_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def create_organization(body: Organization):
    """
    Create organization
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/api/v1/organizations/{organizationId}',
    tags=['organization_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def delete_organization(organization_id: str = Path(..., alias='organizationId')):
    """
    Delete organization
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/v1/organizations/{organizationId}',
    description=""" Returns a single organization. """,
    tags=['organization_management', 'user_organizations'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def find_organization(organization_id: str = Path(..., alias='organizationId')):
    """
    Find organization by id/namespace
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/api/v1/organizations/{organizationId}',
    tags=['organization_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def update_organization(
    organization_id: str = Path(..., alias='organizationId'),
    body: OrganizationUpdate = ...,
):
    """
    Update organization
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/api/v1/organizations/{organizationId}/addresses/billing',
    tags=['organization_billing_management', 'organization_address_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def delete_organization_billing_address(
    organization_id: str = Path(..., alias='organizationId')
):
    """
    Remove billing address
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/v1/organizations/{organizationId}/addresses/billing',
    tags=[
        'billing_operations',
        'organization_billing_management',
        'organization_address_management',
    ],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def find_organization_billing_address(
    organization_id: str = Path(..., alias='organizationId')
):
    """
    Retrieve billing address
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/api/v1/organizations/{organizationId}/addresses/billing',
    tags=['organization_billing_management', 'organization_address_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def update_organization_billing_address(
    organization_id: str = Path(..., alias='organizationId'),
    body: OrganizationAddress = ...,
):
    """
    Store billing address
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/v1/organizations/{organizationId}/addresses/default',
    tags=['organization_address_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def find_organization_address(organization_id: str = Path(..., alias='organizationId')):
    """
    Retrieve address
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/api/v1/organizations/{organizationId}/addresses/default',
    tags=['organization_address_management', 'organization_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def update_organization_address(
    organization_id: str = Path(..., alias='organizationId'),
    body: OrganizationAddress = ...,
):
    """
    Store address
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/v1/organizations/{organizationId}/collections',
    description=""" Retrieving all collections of an organization in a paginated manner. You may filter the results by specifying id4n properties with filter operations (eq, in, ne) in the query parameters. e.g. `com.yourcompany.orderId.eq=1234`   """,
    tags=['collection_management', 'organization_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_all_collections_of_organization(
    offset: Optional[int] = None,
    limit: Optional[int] = None,
    organization_id: str = Path(..., alias='organizationId'),
    type: Optional[Type7] = None,
    label: Optional[str] = None,
    label_prefix: Optional[str] = Query(None, alias='labelPrefix'),
    property: Optional[Property] = None,
):
    """
    Get collections of organization
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/api/v1/organizations/{organizationId}/logo',
    tags=['organization_logo_management', 'organization_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def delete_organization_logo(organization_id: str = Path(..., alias='organizationId')):
    """
    Delete organization logo
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/v1/organizations/{organizationId}/logo',
    description=""" Updating an organization logo using a multipart file upload. """,
    tags=['organization_logo_management', 'organization_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def set_organization_logo(
    organization_id: str = Path(..., alias='organizationId'), file: UploadFile = ...
):
    """
    Update organization logo
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/v1/organizations/{organizationId}/messaging',
    tags=['organization_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_default_queue(organization_id: str = Path(..., alias='organizationId')):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/api/v1/organizations/{organizationId}/messaging',
    tags=['organization_queue_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def patch_default_queue(
    organization_id: str = Path(..., alias='organizationId'),
    body: QueueUpdateRequest = ...,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/v1/organizations/{organizationId}/messaging/enqueueCustomMessage',
    description=""" Enqueue a custom organisation message with custom data. """,
    tags=['organization_queue_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def enqueue_custom_message(
    organization_id: str = Path(..., alias='organizationId'),
    body: SendCustomMessage = ...,
):
    """
    Enqueue a custom message
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/api/v1/organizations/{organizationId}/partner',
    description=""" Removing a partner organization """,
    tags=['organization_partner_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def remove_partner_organization(
    organization_id: str = Path(..., alias='organizationId'),
    body: RemovePartnerRequest = ...,
):
    """
    Remove partner
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/v1/organizations/{organizationId}/partner',
    description=""" Listing partners in a paginated manner. """,
    tags=['organization_partner_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_partner_organizations(
    organization_id: str = Path(..., alias='organizationId'),
    offset: Optional[int] = None,
    limit: Optional[int] = None,
):
    """
    Get partners of an organization
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/api/v1/organizations/{organizationId}/partner',
    description=""" Adding a partner organization. If the given organization is already a partner the result will be state 200 too. """,
    tags=['organization_partner_management', 'organization_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def add_partner_organization(
    organization_id: str = Path(..., alias='organizationId'),
    body: AddPartnerRequest = ...,
):
    """
    Add partner
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/v1/organizations/{organizationId}/privileges',
    description=""" Listing all privileges of the current user/APIKey of the specified organization. """,
    tags=[
        'organization_privileges_management',
        'organization_user_management',
        'role_management',
    ],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_organization_privileges(
    organization_id: str = Path(..., alias='organizationId')
):
    """
    List my privileges
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/v1/organizations/{organizationId}/roles',
    description=""" Listing users and their roles in a paginated manner. """,
    tags=[
        'user_management',
        'organization_user_management',
        'role_management',
        'organization_role_management',
    ],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_all_organization_roles(
    offset: Optional[int] = None,
    limit: Optional[int] = None,
    organization_id: str = Path(..., alias='organizationId'),
):
    """
    List users and their roles
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/v1/organizations/{organizationId}/users',
    description=""" Finding users in the specified organization in a paginated manner. """,
    tags=['user_management', 'organization_user_management', 'user_search'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_users_of_organization(
    offset: Optional[int] = None,
    limit: Optional[int] = None,
    organization_id: str = Path(..., alias='organizationId'),
):
    """
    Find users in organization
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/v1/organizations/{organizationId}/users/invite',
    tags=['organization_user_management', 'user_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def invite_users(
    organization_id: str = Path(..., alias='organizationId'),
    body: OrganizationUserInvitationListRequest = ...,
):
    """
    Invite Users
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/api/v1/organizations/{organizationId}/users/{username}/roles',
    tags=[
        'organization_role_management',
        'role_management',
        'organization_user_management',
    ],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def remove_user_roles(
    organization_id: str = Path(..., alias='organizationId'),
    username: str = ...,
    body: ChangeRoleRequest = ...,
):
    """
    Remove role(s) from user
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/v1/organizations/{organizationId}/users/{username}/roles',
    tags=['organization_user_management', 'role_management', 'user_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_user_roles(
    organization_id: str = Path(..., alias='organizationId'),
    username: str = ...,
    offset: Optional[int] = None,
    limit: Optional[int] = None,
):
    """
    Get user roles by username
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/v1/organizations/{organizationId}/users/{username}/roles',
    tags=[
        'organization_user_management',
        'organization_role_management',
        'role_management',
    ],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def add_user_roles(
    organization_id: str = Path(..., alias='organizationId'),
    username: str = ...,
    body: ChangeRoleRequest = ...,
):
    """
    Add role(s) to user
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/v1/public/documents/{id4n}',
    description=""" Listing all public documents of an id4n """,
    tags=['document_management', 'organization_document_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def list_all_public_documents(
    organization_id: Optional[str] = Query(None, alias='organizationId'),
    id4n: str = ...,
    owner: Optional[str] = None,
    offset: Optional[int] = None,
    limit: Optional[int] = None,
):
    """
    List public documents
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/v1/public/documents/{id4n}/{organizationId}/{fileName}',
    tags=['document_management', 'organization_document_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def read_public_document(
    organization_id: str = Path(..., alias='organizationId'),
    id4n: str = ...,
    file_name: str = Path(..., alias='fileName'),
):
    """
    Read public document contents
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/v1/public/documents/{id4n}/{organizationId}/{fileName}/metadata',
    tags=['document_management', 'organization_document_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_public_document(
    organization_id: str = Path(..., alias='organizationId'),
    id4n: str = ...,
    file_name: str = Path(..., alias='fileName'),
):
    """
    Retrieve a public document (meta-data only, no content)
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/v1/public/history/{id4n}',
    description=""" Only contains public history items """,
    tags=['guid_management', 'history_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def list_public_history(
    id4n: str, offset: Optional[int] = None, limit: Optional[int] = None
):
    """
    Shows the public history of the given GUID
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/v1/public/image/{imageID}',
    tags=['document_management', 'collection_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def resolve_image_using_g_e_t(image_i_d: str = Path(..., alias='imageID')):
    """
    Resolve image
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/v1/public/organizations/{organizationId}',
    tags=['organization_management', 'organization_document_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def read_organization_info(organization_id: str = Path(..., alias='organizationId')):
    """
    Read public organization information
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/v1/public/routes/{id4n}',
    tags=['guid_management', 'route_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_routes(id4n: str, type: str = 'web', interpolate: Optional[bool] = True):
    """
    Retrieve all public routes for a GUID
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/v1/roles',
    description=""" Listing of roles. """,
    tags=['role_management', 'organization_role_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def list_all_roles(
    privilege: Optional[str] = None,
    offset: Optional[int] = None,
    limit: Optional[int] = None,
):
    """
    List roles
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/v1/routingfiles/{id4n}',
    tags=['route_management', 'collection_management', 'document_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_routing_file(
    id4n: str, organization_id: Optional[str] = Query(None, alias='organizationId')
):
    """
    Retrieve routing file
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/api/v1/routingfiles/{id4n}',
    tags=['route_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def update_routing_file(id4n: str, body: RoutingFileRequest = ...):
    """
    Store routing file
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/v1/routingfiles/{id4n}/route/{type}',
    tags=['route_management', 'guid_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_route(
    id4n: str,
    type: str = ...,
    private_routes: Optional[bool] = Query(True, alias='privateRoutes'),
    public_routes: Optional[bool] = Query(True, alias='publicRoutes'),
    interpolate: Optional[bool] = True,
):
    """
    Retrieve current route of a GUID (or ID4N)
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/v1/routingfiles/{id4n}/routes/{type}',
    tags=['route_management', 'guid_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_all_routes(
    id4n: str,
    type: str = ...,
    organization_id: Optional[str] = Query(None, alias='organizationId'),
    interpolate: Optional[bool] = True,
):
    """
    Retrieve all routes of a GUID (or ID4N)
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/v1/search/guids',
    tags=['guid_management', 'alias_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def search_by_alias(
    alias: str,
    alias_type: AliasType = Query(..., alias='aliasType'),
    offset: Optional[int] = None,
    limit: Optional[int] = None,
):
    """
    Search for GUIDs by alias
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/v1/search/guids/aliases/types',
    description=""" Retrieve this list to find out all alias types to use with alias search and change operations """,
    tags=['alias_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_guid_alias_types():
    """
    List all supported alias types
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/api/v1/transfers/{id4n}/receiveInfo',
    description=""" Taking ownership can be forbidden by a previous owner. See methods prepare and getInfo """,
    tags=['guid_transfer', 'collection_management', 'guid_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def receive(id4n: str, body: TransferReceiveInfo = ...):
    """
    Transfer a GUID or collection, obtaining it (i.e. becoming the holder) and if allowed also taking ownership
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/v1/transfers/{id4n}/sendInfo',
    tags=['guid_transfer', 'collection_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_send_info(id4n: str):
    """
    Show transfer preparation information
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/api/v1/transfers/{id4n}/sendInfo',
    tags=['guid_transfer', 'collection_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def prepare(id4n: str, body: TransferSendInfo = ...):
    """
    Prepare an object for transfer
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/v1/user/organizations',
    tags=['user_organizations', 'organization_user_management', 'user_management'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def get_organizations_of_user(
    role: Optional[str] = None,
    offset: Optional[int] = None,
    limit: Optional[int] = None,
):
    """
    Retrieve organizations of user
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/v1/users',
    tags=['user_management', 'user_search'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def find_users(
    username_prefix: Optional[str] = Query(None, alias='usernamePrefix'),
    offset: Optional[int] = None,
    limit: Optional[int] = None,
):
    """
    Find users
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/v1/users/{username}',
    tags=['user_management', 'user_search'],
    security=[
        APIKeyHeader(name="Authorization"),
    ],
)
def find_user_by_username(username: str):
    """
    Find by username
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/go/{guid}',
    description=""" Forwarding to the designated route defined in the routing, """,
    tags=['guid_management', 'guid_transfer'],
)
def go(guid: str):
    """
    Forward
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/login',
    description=""" ID4i API Login """,
    tags=['account_authentication', 'user_management'],
)
def login(body: AccountCredentials):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/whois/{id4n}', tags=['user_management', 'user_search', 'user_organizations'])
def resolve_who_is_entry(id4n: str):
    """
    Resolve owner of id4n
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
